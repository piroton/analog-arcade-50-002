module mojo_top #(ROW=1, COL=1)(
    
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input p1right_button,
    input p1left_button,
    input p1rm1_button,
    input p1rm2_button,
    input p2right_button,
    input p2left_button,
    input p2rm1_button,
    input p2rm2_button,
    output io_led[3][8],
    // LEFT STACK
    output led_wire_0_0,
    output led_wire_0_1,
    output led_wire_0_2,
    output led_wire_0_3,
    output led_wire_0_4,
    output led_wire_0_5,
    output led_wire_0_6,
    output led_wire_0_7,
    output led_wire_0_8,
    output led_wire_0_9,
    // MIDDLE STACK
    output led_wire_1_0,
    output led_wire_1_1,
    output led_wire_1_2,
    output led_wire_1_3,
    output led_wire_1_4,
    output led_wire_1_5,
    output led_wire_1_6,
    output led_wire_1_7,
    output led_wire_1_8,
    output led_wire_1_9,
    // RIGHT STACK
    output led_wire_2_0,
    output led_wire_2_1,
    output led_wire_2_2,
    output led_wire_2_3,
    output led_wire_2_4,
    output led_wire_2_5,
    output led_wire_2_6,
    output led_wire_2_7,
    output led_wire_2_8,
    output led_wire_2_9
    /*
    output led_col_l[10], // left LED column
    output led_col_m[10], // middle LED column
    output led_col_r[10]  // right LED column*/
  ) {
  
  sig rst; // reset signal
  
  // Initialise ALU
  alu alu16;
  const SHR = 6b100001;
  const CMPEQ = 6b110011;
  const CMPLT = 6b110101;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    // EDGE DETECTORS (find falling edges to mark an input)
    // up button is button 1P1/1P2, down button is button 2P1/2P2
    edge_detector detectMoveLP1(#RISE(0), #FALL(1));
    edge_detector detectMoveRP1(#RISE(0), #FALL(1));
    edge_detector detectUpRm1P1(#RISE(0), #FALL(1));
    edge_detector detectDnRm2P1(#RISE(0), #FALL(1));
    edge_detector detectMoveLP2(#RISE(0), #FALL(1));
    edge_detector detectMoveRP2(#RISE(0), #FALL(1));
    edge_detector detectUpRm1P2(#RISE(0), #FALL(1));
    edge_detector detectDnRm2P2(#RISE(0), #FALL(1));

    // BUTTON CONDITIONERS: Ensure clean input from buttons
    button_conditioner buttonMoveLP1;
    button_conditioner buttonMoveRP1;
    button_conditioner buttonRemove1P1;
    button_conditioner buttonRemove2P1;
    
    button_conditioner buttonMoveLP2;
    button_conditioner buttonMoveRP2;
    button_conditioner buttonRemove1P2;
    button_conditioner buttonRemove2P2;
               
    
    .rst(rst){
      lfsr_rand randl;
      lfsr_rand randm;
      lfsr_rand randr;
      
      // initializes all components for the led
      /*
      led_single led_col_l(#ROW(10), #COL(1);
      led_single led_col_m(#ROW(10), #COL(1);
      led_single led_col_r(#ROW(10), #COL(1);
      led_single led_single0_0(#ROW(ROW), #COL(COL));
      led_single led_single0_1(#ROW(ROW), #COL(COL));
      led_single led_single0_2(#ROW(ROW), #COL(COL));
      led_single led_single0_3(#ROW(ROW), #COL(COL));
      led_single led_single0_4(#ROW(ROW), #COL(COL));
      led_single led_single0_5(#ROW(ROW), #COL(COL));
      led_single led_single0_6(#ROW(ROW), #COL(COL));
      led_single led_single0_7(#ROW(ROW), #COL(COL));
      led_single led_single0_8(#ROW(ROW), #COL(COL));
      led_single led_single0_9(#ROW(ROW), #COL(COL));
      
      led_single led_single1_0(#ROW(ROW), #COL(COL));
      led_single led_single1_1(#ROW(ROW), #COL(COL));
      led_single led_single1_2(#ROW(ROW), #COL(COL));
      led_single led_single1_3(#ROW(ROW), #COL(COL));
      led_single led_single1_4(#ROW(ROW), #COL(COL));
      led_single led_single1_5(#ROW(ROW), #COL(COL));
      led_single led_single1_6(#ROW(ROW), #COL(COL));
      led_single led_single1_7(#ROW(ROW), #COL(COL));
      led_single led_single1_8(#ROW(ROW), #COL(COL));
      led_single led_single1_9(#ROW(ROW), #COL(COL));
      
      led_single led_single2_0(#ROW(ROW), #COL(COL));
      led_single led_single2_1(#ROW(ROW), #COL(COL));
      led_single led_single2_2(#ROW(ROW), #COL(COL));
      led_single led_single2_3(#ROW(ROW), #COL(COL));
      led_single led_single2_4(#ROW(ROW), #COL(COL));
      led_single led_single2_5(#ROW(ROW), #COL(COL));
      led_single led_single2_6(#ROW(ROW), #COL(COL));
      led_single led_single2_7(#ROW(ROW), #COL(COL));
      led_single led_single2_8(#ROW(ROW), #COL(COL));
      led_single led_single2_9(#ROW(ROW), #COL(COL));*/
      led_single led_single0_0;
      led_single led_single0_1;
      led_single led_single0_2;
      led_single led_single0_3;
      led_single led_single0_4;
      led_single led_single0_5;
      led_single led_single0_6;
      led_single led_single0_7;
      led_single led_single0_8;
      led_single led_single0_9;
      
      led_single led_single1_0;
      led_single led_single1_1;
      led_single led_single1_2;
      led_single led_single1_3;
      led_single led_single1_4;
      led_single led_single1_5;
      led_single led_single1_6;
      led_single led_single1_7;
      led_single led_single1_8;
      led_single led_single1_9;
      
      led_single led_single2_0;
      led_single led_single2_1;
      led_single led_single2_2;
      led_single led_single2_3;
      led_single led_single2_4;
      led_single led_single2_5;
      led_single led_single2_6;
      led_single led_single2_7;
      led_single led_single2_8;
      led_single led_single2_9;
      
      dff leftstack[10](#INIT(10b1111111111)); // set left stack to 10
      dff middlestack[10](#INIT(10b1111111111)); // set middle stack to 10
      dff rightstack[10](#INIT(10b1111111111)); // set right stack to 10
            
      dff led_output0[2](#INIT({{b00},{b00},{b00},{b00},{b00},
                                {b00},{b00},{b00},{b00},{b00}}));
      dff led_output1[2](#INIT({{b00},{b00},{b00},{b00},{b00},
                                {b00},{b00},{b00},{b00},{b00}}));
      dff led_output2[2](#INIT({{b00},{b00},{b00},{b00},{b00},
                                {b00},{b00},{b00},{b00},{b00}}));
    }
  }
  
  fsm states(.clk(clk), .rst(rst)) = {START, P1L, P1M, P1R, P1C, P2L, P2M, P2R, P2C};
  // states
  // P1L: player 1 left stack
  // P1M: player 1 middle stack
  // P1R: player 1 right stack
  // P1C: end of player 1's turn, in here we check if player 1 wins
  // P2L: player 2 left stack
  // P2M: player 2 middle stack
  // P2R: player 2 right stack
  // P2C: end of player 2's turn, in here we check if player 2 wins
  
  
  always {
    led_single0_0.data[0] = leftstack.q[0];
    led_single0_1.data[0] = leftstack.q[1];
    led_single0_2.data[0] = leftstack.q[2];
    led_single0_3.data[0] = leftstack.q[3];
    led_single0_4.data[0] = leftstack.q[4];
    led_single0_5.data[0] = leftstack.q[5];
    led_single0_6.data[0] = leftstack.q[6];
    led_single0_7.data[0] = leftstack.q[7];
    led_single0_8.data[0] = leftstack.q[8];
    led_single0_9.data[0] = leftstack.q[9];
    
    led_single0_0.data[1] = b0;
    led_single0_1.data[1] = b0;
    led_single0_2.data[1] = b0;
    led_single0_3.data[1] = b0;
    led_single0_4.data[1] = b0;
    led_single0_5.data[1] = b0;
    led_single0_6.data[1] = b0;
    led_single0_7.data[1] = b0;
    led_single0_8.data[1] = b0;
    led_single0_9.data[1] = b0;
    
    led_single1_0.data[0] = middlestack.q[0];
    led_single1_1.data[0] = middlestack.q[1];
    led_single1_2.data[0] = middlestack.q[2];
    led_single1_3.data[0] = middlestack.q[3];
    led_single1_4.data[0] = middlestack.q[4];
    led_single1_5.data[0] = middlestack.q[5];
    led_single1_6.data[0] = middlestack.q[6];
    led_single1_7.data[0] = middlestack.q[7];
    led_single1_8.data[0] = middlestack.q[8];
    led_single1_9.data[0] = middlestack.q[9];
    
    led_single1_0.data[1] = b0;
    led_single1_1.data[1] = b0;
    led_single1_2.data[1] = b0;
    led_single1_3.data[1] = b0;
    led_single1_4.data[1] = b0;
    led_single1_5.data[1] = b0;
    led_single1_6.data[1] = b0;
    led_single1_7.data[1] = b0;
    led_single1_8.data[1] = b0;
    led_single1_9.data[1] = b0;
    
    led_single2_0.data[0] = rightstack.q[0];
    led_single2_1.data[0] = rightstack.q[1];
    led_single2_2.data[0] = rightstack.q[2];
    led_single2_3.data[0] = rightstack.q[3];
    led_single2_4.data[0] = rightstack.q[4];
    led_single2_5.data[0] = rightstack.q[5];
    led_single2_6.data[0] = rightstack.q[6];
    led_single2_7.data[0] = rightstack.q[7];
    led_single2_8.data[0] = rightstack.q[8];
    led_single2_9.data[0] = rightstack.q[9];
    
    led_single2_0.data[1] = b0;
    led_single2_1.data[1] = b0;
    led_single2_2.data[1] = b0;
    led_single2_3.data[1] = b0;
    led_single2_4.data[1] = b0;
    led_single2_5.data[1] = b0;
    led_single2_6.data[1] = b0;
    led_single2_7.data[1] = b0;
    led_single2_8.data[1] = b0;
    led_single2_9.data[1] = b0;
    
    led_wire_0_0 = led_single0_0.out;
    led_wire_0_1 = led_single0_1.out;
    led_wire_0_2 = led_single0_2.out;
    led_wire_0_3 = led_single0_3.out;
    led_wire_0_4 = led_single0_4.out;
    led_wire_0_5 = led_single0_5.out;
    led_wire_0_6 = led_single0_6.out;
    led_wire_0_7 = led_single0_7.out;
    led_wire_0_8 = led_single0_8.out;
    led_wire_0_9 = led_single0_9.out;
    
    led_wire_1_0 = led_single1_0.out;
    led_wire_1_1 = led_single1_1.out;
    led_wire_1_2 = led_single1_2.out;
    led_wire_1_3 = led_single1_3.out;
    led_wire_1_4 = led_single1_4.out;
    led_wire_1_5 = led_single1_5.out;
    led_wire_1_6 = led_single1_6.out;
    led_wire_1_7 = led_single1_7.out;
    led_wire_1_8 = led_single1_8.out;
    led_wire_1_9 = led_single1_9.out;
    
    led_wire_2_0 = led_single2_0.out;
    led_wire_2_1 = led_single2_1.out;
    led_wire_2_2 = led_single2_2.out;
    led_wire_2_3 = led_single2_3.out;
    led_wire_2_4 = led_single2_4.out;
    led_wire_2_5 = led_single2_5.out;
    led_wire_2_6 = led_single2_6.out;
    led_wire_2_7 = led_single2_7.out;
    led_wire_2_8 = led_single2_8.out;
    led_wire_2_9 = led_single2_9.out;

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    // initialise inputs/outputs as 0 first, then change input accordingly later
    alu16.a = 16b0;
    alu16.b = 16b0;
    alu16.opcode = 6b0;
    
    // Button Initializing
    buttonMoveLP1.in = p1left_button;
    buttonMoveRP1.in = p1right_button;
    buttonRemove1P1.in = p1rm1_button;
    buttonRemove2P1.in = p1rm2_button;

    buttonMoveLP2.in = p2left_button;
    buttonMoveRP2.in = p2right_button;
    buttonRemove1P2.in = p2rm1_button;
    buttonRemove2P2.in = p2rm2_button;

    detectMoveLP1.in = buttonMoveLP1.out;
    detectMoveRP1.in = buttonMoveRP1.out;
    detectUpRm1P1.in = buttonRemove1P1.out;
    detectDnRm2P1.in = buttonRemove2P1.out;

    detectMoveLP2.in = buttonMoveLP2.out;
    detectMoveRP2.in = buttonMoveRP2.out;
    detectUpRm1P2.in = buttonRemove1P2.out;
    detectDnRm2P2.in = buttonRemove2P2.out;

    // Activate randomisers
    randl.enable = 1;
    randm.enable = 1;
    randr.enable = 1;
    
    io_led[0] = leftstack.q;
    io_led[1] = middlestack.q;
    io_led[2] = rightstack.q;

    case(states.q){
      states.START:
        
        randl.enable = 1;  // to re-randomise game resets
        randm.enable = 1;
        randr.enable = 1;
        
        leftstack.d   = randl.out;
        middlestack.d = randm.out;
        rightstack.d  = randr.out;
        
        if (detectUpRm1P1.out == 1 | detectUpRm1P2.out == 1){
          states.d = states.P1M;
        } else {
          states.d = states.START;
        }
        
        
      states.P1M:
        
        randl.enable = 0;
        randm.enable = 0;
        randr.enable = 0;
        
        alu16.b = 16b1;
        alu16.opcode = CMPLT;
        
        if(detectMoveLP1.out == 1){
          alu16.a = leftstack.q;

          if (alu16.out[0] == 1){
            states.d = states.P1M;
          } else {
            states.d = states.P1L;
          }
        }
        else if (detectMoveRP1.out == 1){
          alu16.a = rightstack.q;

          if (alu16.out[0] == 1){
            states.d = states.P1M;
          } else {
            states.d = states.P1R;
          }
        }
        else if (detectUpRm1P1.out == 1){
          alu16.a = middlestack.q;
          alu16.b = 16b1;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P1M;
          }else{
            alu16.opcode = SHR;
            middlestack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P1C;
          }
        }
        else if (detectDnRm2P1.out == 1){
          alu16.a = middlestack.q;
          alu16.b = 16b10;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 2
            states.d = states.P1M;
          }else{
            alu16.opcode = SHR;
            middlestack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P1C;
          }
        }
                

      states.P1L:
        
        randl.enable = 0;
        randm.enable = 0;
        randr.enable = 0;
        
        alu16.b = 16b1;
        alu16.opcode = CMPLT;
        
        if (detectMoveLP1.out == 1){
          states.d = states.P1L;
        }
        else if (detectMoveRP1.out == 1) {
          alu16.a = middlestack.q;

          if (alu16.out[0] == 1){
            states.d = states.P1R;
            
            alu16.a = rightstack.q;

            if (alu16.out[0] == 1){
              states.d = states.P1L;
            }
          } else {
            states.d = states.P1M;
          }
        }
        else if (detectUpRm1P1.out == 1){
          alu16.a = leftstack.q;
          alu16.b = 16b1;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P1L;
          }else{
            alu16.opcode = SHR;
            leftstack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P1C;
          }
        }
        else if (detectDnRm2P1.out == 1){
          alu16.a = leftstack.q;
          alu16.b = 16b10;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P1L;
          }else{
            alu16.opcode = SHR;
            leftstack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P1C;
          }
        }
        
      states.P1R:
        
        randl.enable = 0;
        randm.enable = 0;
        randr.enable = 0;
        
        alu16.b = 16b1;
        alu16.opcode = CMPLT;
        
        if (detectMoveLP1.out == 1){
          alu16.a = middlestack.q;

          if (alu16.out[0] == 1){
            states.d = states.P1L;
            
            alu16.a = leftstack.q;

            if (alu16.out[0] == 1){
              states.d = states.P1R;
            }
          } else {
            states.d = states.P1M;
          }
        }
        else if (detectMoveRP1.out == 1) {
          states.d = states.P1R;
        }
        else if (detectUpRm1P1.out == 1){
          alu16.a = rightstack.q;
          alu16.b = 16b1;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P1R;
          }else{
            alu16.opcode = SHR;
            rightstack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P1C;
          }
        }
        else if (detectDnRm2P1.out == 1){
          alu16.a = rightstack.q;
          alu16.b = 16b10;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P1R;
          }else{
            alu16.opcode = SHR;
            rightstack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P1C;
          }
        }
        
        
      states.P2M:
        
        randl.enable = 0;
        randm.enable = 0;
        randr.enable = 0;
        
        alu16.b = 16b1;
        alu16.opcode = CMPLT;
        
        if (detectMoveLP2.out == 1){
          alu16.a = leftstack.q;

          if (alu16.out[0] == 1){
            states.d = states.P2M;
          }else{
            states.d = states.P2L;
          }
        }
        else if (detectMoveRP2.out == 1) {
          alu16.a = rightstack.q;

          if (alu16.out[0] == 1){
            states.d = states.P2M;
          }else{
            states.d = states.P2R;
          }
        }
        else if (detectUpRm1P2.out == 1){
          alu16.a = middlestack.q;
          alu16.b = 16b1;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P2M;
          }else{
            alu16.opcode = SHR;
            middlestack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P2C;
          }
        }
        else if (detectDnRm2P2.out == 1){
          alu16.a = middlestack.q;
          alu16.b = 16b10;
          alu16.opcode = CMPLT;       
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P2M;
          }else{
            alu16.opcode = SHR;
            middlestack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P2C;
          }
        }
        
        
      states.P2L:
        
        randl.enable = 0;
        randm.enable = 0;
        randr.enable = 0;
        
        alu16.b = 16b1;
        alu16.opcode = CMPLT;
        
        if (detectMoveLP2.out == 1){
          states.d = states.P2L;
        }
        else if (detectMoveRP2.out == 1) {
          alu16.a = middlestack.q;

          if (alu16.out[0] == 1){
            states.d = states.P2R;
            
            alu16.a = rightstack.q;

            if (alu16.out[0] == 1){
              states.d = states.P2L;
            }
          } else {
            states.d = states.P2M;
          }
        }
        else if (detectUpRm1P2.out == 1){
          alu16.a = leftstack.q;
          alu16.b = 16b1;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P2L;
          }else{
            alu16.opcode = SHR;
            leftstack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P2C;
          }
        }
        else if (detectDnRm2P2.out == 1){
          alu16.a = leftstack.q;
          alu16.b = 16b10;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P2L;
          }else{
            alu16.opcode = SHR;
            leftstack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P2C;
          }
        }
        
        
      states.P2R:
        
        randl.enable = 0;
        randm.enable = 0;
        randr.enable = 0;
        
        alu16.b = 16b1;
        alu16.opcode = CMPLT;
        
        if (detectMoveLP2.out == 1){
          alu16.a = middlestack.q;

          if (alu16.out[0] == 1){
            states.d = states.P2L;
            
            alu16.a = leftstack.q;

            if (alu16.out[0] == 1){
              states.d = states.P2R;
            }
          } else {
            states.d = states.P2M;
          }
        }
        else if (detectMoveRP2.out == 1) {
          states.d = states.P2R;
        }
        else if (detectUpRm1P2.out == 1){
          alu16.a = rightstack.q;
          alu16.b = 16b1;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P2R;
          }else{
            alu16.opcode = SHR;
            rightstack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P2C;
          }
        }
        else if (detectDnRm2P2.out == 1){
          alu16.a = rightstack.q;
          alu16.b = 16b10;
          alu16.opcode = CMPLT;
          
          if (alu16.out == 16b1){  // Check if there is enough LEDs left to shift right by 1
            states.d = states.P2R;
          }else{
            alu16.opcode = SHR;
            rightstack.d = alu16.out;  // input of alu16 is alr at most 10 digits, so dropping most sig bit is ok
            states.d = states.P2C;
          }
        }
        
        
      states.P1C:
        
        alu16.a = leftstack.q;
        alu16.b = 10b0;
        alu16.opcode = CMPEQ;
        
        if (alu16.out[0] == 1 && middlestack.q == 16b0 && rightstack.q == 16b0){    // If all stacks are empty, restart game
          states.d = states.START;
        }else{
          alu16.a = leftstack.q;
          alu16.b = 10b1;
          alu16.opcode = CMPLT;
                    
          if (middlestack.q >= 10b1){
            states.d = states.P2M;
          }else if (alu16.out[0] != 1){
            states.d = states.P2L;
          }else{
            states.d = states.P2R;
          }
        }
          
      states.P2C:
        
        alu16.a = leftstack.q;
        alu16.b = 10b0;
        alu16.opcode = CMPEQ;
        
        if (alu16.out[0] == 1 && middlestack.q == 16b0 && rightstack.q == 16b0){    // If all stacks are empty, restart game
          states.d = states.START;
        }else{
          alu16.a = leftstack.q;
          alu16.b = 10b1;
          alu16.opcode = CMPLT;
        
          if (middlestack.q >= 10b1){
            states.d = states.P1M;
          }else if (alu16.out[0] != 1){
            states.d = states.P1L;
          }else{
            states.d = states.P1R;
          }
        }
        
      default:
        states.d = states.START;
          
    }        
  }
}