/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     ROW = ROW
     COL = COL
     LED_BITS = 8*3
     BIT_CLOCKS = 64
*/
module led_top_30 (
    input clk,
    input rst,
    input [19:0] data,
    output reg out
  );
  
  localparam ROW = 4'ha;
  localparam COL = 1'h1;
  localparam LED_BITS = 6'h18;
  localparam BIT_CLOCKS = 7'h40;
  
  
  localparam LED_0 = 1'h0;
  
  localparam LED_1 = 1'h1;
  
  localparam LED_2 = 2'h2;
  
  localparam LED_3 = 2'h3;
  
  localparam COLOR_BLACK = 24'h000000;
  
  localparam COLOR_RED = 24'h008010;
  
  localparam COLOR_GREEN = 24'h800010;
  
  localparam COLOR_BLUE = 24'h0000ff;
  
  reg [19:0] M_board_d, M_board_q = 1'h0;
  
  reg [13:0] M_counter_d, M_counter_q = 1'h0;
  
  reg [10:0] foo;
  
  reg [1:0] led_state;
  
  reg [23:0] grb;
  
  integer r;
  integer c;
  
  always @* begin
    M_counter_d = M_counter_q;
    M_board_d = M_board_q;
    
    out = 1'h0;
    for (c = 1'h0; c < 1'h1; c = c + 1) begin
      for (r = 1'h0; r < 4'ha; r = r + 1) begin
        M_board_d[(r + c * 1'h1)*2+1-:2] = data[(r)*2+(c)*2+1-:2];
      end
    end
    if (M_counter_q < 17'h03c00) begin
      c = M_counter_q / 13'h0600;
      led_state = M_board_q[(c)*2+1-:2];
      
      case (led_state)
        1'h0: begin
          grb = 24'h000000;
        end
        1'h1: begin
          grb = 24'h800010;
        end
        2'h2: begin
          grb = 24'h800010;
        end
        2'h3: begin
          grb = 24'h0000ff;
        end
        default: begin
          grb = 24'h000000;
        end
      endcase
      foo = M_counter_q - ((M_counter_q / 13'h0600) * 13'h0600);
      if (grb[(5'h17 - (foo >> 3'h6))*1+0-:1] == 1'h0) begin
        if (foo[0+5-:6] < 5'h14) begin
          out = 1'h1;
        end
      end else begin
        if (foo[0+5-:6] < 6'h28) begin
          out = 1'h1;
        end
      end
    end
    M_counter_d = M_counter_q + 1'h1;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_board_q <= 1'h0;
    end else begin
      M_board_q <= M_board_d;
    end
  end
  
endmodule
