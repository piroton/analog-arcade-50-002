/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input p1right_button,
    input p1left_button,
    input p1rm1_button,
    input p1rm2_button,
    input p2right_button,
    input p2left_button,
    input p2rm1_button,
    input p2rm2_button,
    output reg [23:0] io_led,
    output reg led_wire_0_0,
    output reg led_wire_0_1,
    output reg led_wire_0_2,
    output reg led_wire_0_3,
    output reg led_wire_0_4,
    output reg led_wire_0_5,
    output reg led_wire_0_6,
    output reg led_wire_0_7,
    output reg led_wire_0_8,
    output reg led_wire_0_9,
    output reg led_wire_1_0,
    output reg led_wire_1_1,
    output reg led_wire_1_2,
    output reg led_wire_1_3,
    output reg led_wire_1_4,
    output reg led_wire_1_5,
    output reg led_wire_1_6,
    output reg led_wire_1_7,
    output reg led_wire_1_8,
    output reg led_wire_1_9,
    output reg led_wire_2_0,
    output reg led_wire_2_1,
    output reg led_wire_2_2,
    output reg led_wire_2_3,
    output reg led_wire_2_4,
    output reg led_wire_2_5,
    output reg led_wire_2_6,
    output reg led_wire_2_7,
    output reg led_wire_2_8,
    output reg led_wire_2_9
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  wire [1-1:0] M_alu16_overflow;
  wire [16-1:0] M_alu16_getA;
  wire [16-1:0] M_alu16_getB;
  wire [6-1:0] M_alu16_getOpcode;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  reg [6-1:0] M_alu16_opcode;
  alu_1 alu16 (
    .a(M_alu16_a),
    .b(M_alu16_b),
    .opcode(M_alu16_opcode),
    .out(M_alu16_out),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n),
    .overflow(M_alu16_overflow),
    .getA(M_alu16_getA),
    .getB(M_alu16_getB),
    .getOpcode(M_alu16_getOpcode)
  );
  
  localparam SHR = 6'h21;
  
  localparam CMPEQ = 6'h33;
  
  localparam CMPLT = 6'h35;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_detectMoveLP1_out;
  reg [1-1:0] M_detectMoveLP1_in;
  edge_detector_3 detectMoveLP1 (
    .clk(clk),
    .in(M_detectMoveLP1_in),
    .out(M_detectMoveLP1_out)
  );
  wire [1-1:0] M_detectMoveRP1_out;
  reg [1-1:0] M_detectMoveRP1_in;
  edge_detector_3 detectMoveRP1 (
    .clk(clk),
    .in(M_detectMoveRP1_in),
    .out(M_detectMoveRP1_out)
  );
  wire [1-1:0] M_detectUpRm1P1_out;
  reg [1-1:0] M_detectUpRm1P1_in;
  edge_detector_3 detectUpRm1P1 (
    .clk(clk),
    .in(M_detectUpRm1P1_in),
    .out(M_detectUpRm1P1_out)
  );
  wire [1-1:0] M_detectDnRm2P1_out;
  reg [1-1:0] M_detectDnRm2P1_in;
  edge_detector_3 detectDnRm2P1 (
    .clk(clk),
    .in(M_detectDnRm2P1_in),
    .out(M_detectDnRm2P1_out)
  );
  wire [1-1:0] M_detectMoveLP2_out;
  reg [1-1:0] M_detectMoveLP2_in;
  edge_detector_3 detectMoveLP2 (
    .clk(clk),
    .in(M_detectMoveLP2_in),
    .out(M_detectMoveLP2_out)
  );
  wire [1-1:0] M_detectMoveRP2_out;
  reg [1-1:0] M_detectMoveRP2_in;
  edge_detector_3 detectMoveRP2 (
    .clk(clk),
    .in(M_detectMoveRP2_in),
    .out(M_detectMoveRP2_out)
  );
  wire [1-1:0] M_detectUpRm1P2_out;
  reg [1-1:0] M_detectUpRm1P2_in;
  edge_detector_3 detectUpRm1P2 (
    .clk(clk),
    .in(M_detectUpRm1P2_in),
    .out(M_detectUpRm1P2_out)
  );
  wire [1-1:0] M_detectDnRm2P2_out;
  reg [1-1:0] M_detectDnRm2P2_in;
  edge_detector_3 detectDnRm2P2 (
    .clk(clk),
    .in(M_detectDnRm2P2_in),
    .out(M_detectDnRm2P2_out)
  );
  wire [1-1:0] M_buttonMoveLP1_out;
  reg [1-1:0] M_buttonMoveLP1_in;
  button_conditioner_11 buttonMoveLP1 (
    .clk(clk),
    .in(M_buttonMoveLP1_in),
    .out(M_buttonMoveLP1_out)
  );
  wire [1-1:0] M_buttonMoveRP1_out;
  reg [1-1:0] M_buttonMoveRP1_in;
  button_conditioner_11 buttonMoveRP1 (
    .clk(clk),
    .in(M_buttonMoveRP1_in),
    .out(M_buttonMoveRP1_out)
  );
  wire [1-1:0] M_buttonRemove1P1_out;
  reg [1-1:0] M_buttonRemove1P1_in;
  button_conditioner_11 buttonRemove1P1 (
    .clk(clk),
    .in(M_buttonRemove1P1_in),
    .out(M_buttonRemove1P1_out)
  );
  wire [1-1:0] M_buttonRemove2P1_out;
  reg [1-1:0] M_buttonRemove2P1_in;
  button_conditioner_11 buttonRemove2P1 (
    .clk(clk),
    .in(M_buttonRemove2P1_in),
    .out(M_buttonRemove2P1_out)
  );
  wire [1-1:0] M_buttonMoveLP2_out;
  reg [1-1:0] M_buttonMoveLP2_in;
  button_conditioner_11 buttonMoveLP2 (
    .clk(clk),
    .in(M_buttonMoveLP2_in),
    .out(M_buttonMoveLP2_out)
  );
  wire [1-1:0] M_buttonMoveRP2_out;
  reg [1-1:0] M_buttonMoveRP2_in;
  button_conditioner_11 buttonMoveRP2 (
    .clk(clk),
    .in(M_buttonMoveRP2_in),
    .out(M_buttonMoveRP2_out)
  );
  wire [1-1:0] M_buttonRemove1P2_out;
  reg [1-1:0] M_buttonRemove1P2_in;
  button_conditioner_11 buttonRemove1P2 (
    .clk(clk),
    .in(M_buttonRemove1P2_in),
    .out(M_buttonRemove1P2_out)
  );
  wire [1-1:0] M_buttonRemove2P2_out;
  reg [1-1:0] M_buttonRemove2P2_in;
  button_conditioner_11 buttonRemove2P2 (
    .clk(clk),
    .in(M_buttonRemove2P2_in),
    .out(M_buttonRemove2P2_out)
  );
  wire [10-1:0] M_randl_out;
  reg [1-1:0] M_randl_enable;
  lfsr_rand_19 randl (
    .clk(clk),
    .rst(rst),
    .enable(M_randl_enable),
    .out(M_randl_out)
  );
  wire [10-1:0] M_randm_out;
  reg [1-1:0] M_randm_enable;
  lfsr_rand_19 randm (
    .clk(clk),
    .rst(rst),
    .enable(M_randm_enable),
    .out(M_randm_out)
  );
  wire [10-1:0] M_randr_out;
  reg [1-1:0] M_randr_enable;
  lfsr_rand_19 randr (
    .clk(clk),
    .rst(rst),
    .enable(M_randr_enable),
    .out(M_randr_out)
  );
  wire [1-1:0] M_led_single0_0_out;
  reg [2-1:0] M_led_single0_0_data;
  led_single_22 led_single0_0 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_0_data),
    .out(M_led_single0_0_out)
  );
  wire [1-1:0] M_led_single0_1_out;
  reg [2-1:0] M_led_single0_1_data;
  led_single_22 led_single0_1 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_1_data),
    .out(M_led_single0_1_out)
  );
  wire [1-1:0] M_led_single0_2_out;
  reg [2-1:0] M_led_single0_2_data;
  led_single_22 led_single0_2 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_2_data),
    .out(M_led_single0_2_out)
  );
  wire [1-1:0] M_led_single0_3_out;
  reg [2-1:0] M_led_single0_3_data;
  led_single_22 led_single0_3 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_3_data),
    .out(M_led_single0_3_out)
  );
  wire [1-1:0] M_led_single0_4_out;
  reg [2-1:0] M_led_single0_4_data;
  led_single_22 led_single0_4 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_4_data),
    .out(M_led_single0_4_out)
  );
  wire [1-1:0] M_led_single0_5_out;
  reg [2-1:0] M_led_single0_5_data;
  led_single_22 led_single0_5 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_5_data),
    .out(M_led_single0_5_out)
  );
  wire [1-1:0] M_led_single0_6_out;
  reg [2-1:0] M_led_single0_6_data;
  led_single_22 led_single0_6 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_6_data),
    .out(M_led_single0_6_out)
  );
  wire [1-1:0] M_led_single0_7_out;
  reg [2-1:0] M_led_single0_7_data;
  led_single_22 led_single0_7 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_7_data),
    .out(M_led_single0_7_out)
  );
  wire [1-1:0] M_led_single0_8_out;
  reg [2-1:0] M_led_single0_8_data;
  led_single_22 led_single0_8 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_8_data),
    .out(M_led_single0_8_out)
  );
  wire [1-1:0] M_led_single0_9_out;
  reg [2-1:0] M_led_single0_9_data;
  led_single_22 led_single0_9 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single0_9_data),
    .out(M_led_single0_9_out)
  );
  wire [1-1:0] M_led_single1_0_out;
  reg [2-1:0] M_led_single1_0_data;
  led_single_22 led_single1_0 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_0_data),
    .out(M_led_single1_0_out)
  );
  wire [1-1:0] M_led_single1_1_out;
  reg [2-1:0] M_led_single1_1_data;
  led_single_22 led_single1_1 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_1_data),
    .out(M_led_single1_1_out)
  );
  wire [1-1:0] M_led_single1_2_out;
  reg [2-1:0] M_led_single1_2_data;
  led_single_22 led_single1_2 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_2_data),
    .out(M_led_single1_2_out)
  );
  wire [1-1:0] M_led_single1_3_out;
  reg [2-1:0] M_led_single1_3_data;
  led_single_22 led_single1_3 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_3_data),
    .out(M_led_single1_3_out)
  );
  wire [1-1:0] M_led_single1_4_out;
  reg [2-1:0] M_led_single1_4_data;
  led_single_22 led_single1_4 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_4_data),
    .out(M_led_single1_4_out)
  );
  wire [1-1:0] M_led_single1_5_out;
  reg [2-1:0] M_led_single1_5_data;
  led_single_22 led_single1_5 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_5_data),
    .out(M_led_single1_5_out)
  );
  wire [1-1:0] M_led_single1_6_out;
  reg [2-1:0] M_led_single1_6_data;
  led_single_22 led_single1_6 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_6_data),
    .out(M_led_single1_6_out)
  );
  wire [1-1:0] M_led_single1_7_out;
  reg [2-1:0] M_led_single1_7_data;
  led_single_22 led_single1_7 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_7_data),
    .out(M_led_single1_7_out)
  );
  wire [1-1:0] M_led_single1_8_out;
  reg [2-1:0] M_led_single1_8_data;
  led_single_22 led_single1_8 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_8_data),
    .out(M_led_single1_8_out)
  );
  wire [1-1:0] M_led_single1_9_out;
  reg [2-1:0] M_led_single1_9_data;
  led_single_22 led_single1_9 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single1_9_data),
    .out(M_led_single1_9_out)
  );
  wire [1-1:0] M_led_single2_0_out;
  reg [2-1:0] M_led_single2_0_data;
  led_single_22 led_single2_0 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_0_data),
    .out(M_led_single2_0_out)
  );
  wire [1-1:0] M_led_single2_1_out;
  reg [2-1:0] M_led_single2_1_data;
  led_single_22 led_single2_1 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_1_data),
    .out(M_led_single2_1_out)
  );
  wire [1-1:0] M_led_single2_2_out;
  reg [2-1:0] M_led_single2_2_data;
  led_single_22 led_single2_2 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_2_data),
    .out(M_led_single2_2_out)
  );
  wire [1-1:0] M_led_single2_3_out;
  reg [2-1:0] M_led_single2_3_data;
  led_single_22 led_single2_3 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_3_data),
    .out(M_led_single2_3_out)
  );
  wire [1-1:0] M_led_single2_4_out;
  reg [2-1:0] M_led_single2_4_data;
  led_single_22 led_single2_4 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_4_data),
    .out(M_led_single2_4_out)
  );
  wire [1-1:0] M_led_single2_5_out;
  reg [2-1:0] M_led_single2_5_data;
  led_single_22 led_single2_5 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_5_data),
    .out(M_led_single2_5_out)
  );
  wire [1-1:0] M_led_single2_6_out;
  reg [2-1:0] M_led_single2_6_data;
  led_single_22 led_single2_6 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_6_data),
    .out(M_led_single2_6_out)
  );
  wire [1-1:0] M_led_single2_7_out;
  reg [2-1:0] M_led_single2_7_data;
  led_single_22 led_single2_7 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_7_data),
    .out(M_led_single2_7_out)
  );
  wire [1-1:0] M_led_single2_8_out;
  reg [2-1:0] M_led_single2_8_data;
  led_single_22 led_single2_8 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_8_data),
    .out(M_led_single2_8_out)
  );
  wire [1-1:0] M_led_single2_9_out;
  reg [2-1:0] M_led_single2_9_data;
  led_single_22 led_single2_9 (
    .clk(clk),
    .rst(rst),
    .data(M_led_single2_9_data),
    .out(M_led_single2_9_out)
  );
  reg [9:0] M_leftstack_d, M_leftstack_q = 10'h3ff;
  reg [9:0] M_middlestack_d, M_middlestack_q = 10'h3ff;
  reg [9:0] M_rightstack_d, M_rightstack_q = 10'h3ff;
  reg [1:0] M_led_output0_d, M_led_output0_q = 20'h00000;
  reg [1:0] M_led_output1_d, M_led_output1_q = 20'h00000;
  reg [1:0] M_led_output2_d, M_led_output2_q = 20'h00000;
  
  
  localparam START_states = 4'd0;
  localparam P1L_states = 4'd1;
  localparam P1M_states = 4'd2;
  localparam P1R_states = 4'd3;
  localparam P1C_states = 4'd4;
  localparam P2L_states = 4'd5;
  localparam P2M_states = 4'd6;
  localparam P2R_states = 4'd7;
  localparam P2C_states = 4'd8;
  
  reg [3:0] M_states_d, M_states_q = START_states;
  
  always @* begin
    M_states_d = M_states_q;
    M_leftstack_d = M_leftstack_q;
    M_rightstack_d = M_rightstack_q;
    M_middlestack_d = M_middlestack_q;
    
    M_led_single0_0_data[0+0-:1] = M_leftstack_q[0+0-:1];
    M_led_single0_1_data[0+0-:1] = M_leftstack_q[1+0-:1];
    M_led_single0_2_data[0+0-:1] = M_leftstack_q[2+0-:1];
    M_led_single0_3_data[0+0-:1] = M_leftstack_q[3+0-:1];
    M_led_single0_4_data[0+0-:1] = M_leftstack_q[4+0-:1];
    M_led_single0_5_data[0+0-:1] = M_leftstack_q[5+0-:1];
    M_led_single0_6_data[0+0-:1] = M_leftstack_q[6+0-:1];
    M_led_single0_7_data[0+0-:1] = M_leftstack_q[7+0-:1];
    M_led_single0_8_data[0+0-:1] = M_leftstack_q[8+0-:1];
    M_led_single0_9_data[0+0-:1] = M_leftstack_q[9+0-:1];
    M_led_single0_0_data[1+0-:1] = 1'h0;
    M_led_single0_1_data[1+0-:1] = 1'h0;
    M_led_single0_2_data[1+0-:1] = 1'h0;
    M_led_single0_3_data[1+0-:1] = 1'h0;
    M_led_single0_4_data[1+0-:1] = 1'h0;
    M_led_single0_5_data[1+0-:1] = 1'h0;
    M_led_single0_6_data[1+0-:1] = 1'h0;
    M_led_single0_7_data[1+0-:1] = 1'h0;
    M_led_single0_8_data[1+0-:1] = 1'h0;
    M_led_single0_9_data[1+0-:1] = 1'h0;
    M_led_single1_0_data[0+0-:1] = M_middlestack_q[0+0-:1];
    M_led_single1_1_data[0+0-:1] = M_middlestack_q[1+0-:1];
    M_led_single1_2_data[0+0-:1] = M_middlestack_q[2+0-:1];
    M_led_single1_3_data[0+0-:1] = M_middlestack_q[3+0-:1];
    M_led_single1_4_data[0+0-:1] = M_middlestack_q[4+0-:1];
    M_led_single1_5_data[0+0-:1] = M_middlestack_q[5+0-:1];
    M_led_single1_6_data[0+0-:1] = M_middlestack_q[6+0-:1];
    M_led_single1_7_data[0+0-:1] = M_middlestack_q[7+0-:1];
    M_led_single1_8_data[0+0-:1] = M_middlestack_q[8+0-:1];
    M_led_single1_9_data[0+0-:1] = M_middlestack_q[9+0-:1];
    M_led_single1_0_data[1+0-:1] = 1'h0;
    M_led_single1_1_data[1+0-:1] = 1'h0;
    M_led_single1_2_data[1+0-:1] = 1'h0;
    M_led_single1_3_data[1+0-:1] = 1'h0;
    M_led_single1_4_data[1+0-:1] = 1'h0;
    M_led_single1_5_data[1+0-:1] = 1'h0;
    M_led_single1_6_data[1+0-:1] = 1'h0;
    M_led_single1_7_data[1+0-:1] = 1'h0;
    M_led_single1_8_data[1+0-:1] = 1'h0;
    M_led_single1_9_data[1+0-:1] = 1'h0;
    M_led_single2_0_data[0+0-:1] = M_rightstack_q[0+0-:1];
    M_led_single2_1_data[0+0-:1] = M_rightstack_q[1+0-:1];
    M_led_single2_2_data[0+0-:1] = M_rightstack_q[2+0-:1];
    M_led_single2_3_data[0+0-:1] = M_rightstack_q[3+0-:1];
    M_led_single2_4_data[0+0-:1] = M_rightstack_q[4+0-:1];
    M_led_single2_5_data[0+0-:1] = M_rightstack_q[5+0-:1];
    M_led_single2_6_data[0+0-:1] = M_rightstack_q[6+0-:1];
    M_led_single2_7_data[0+0-:1] = M_rightstack_q[7+0-:1];
    M_led_single2_8_data[0+0-:1] = M_rightstack_q[8+0-:1];
    M_led_single2_9_data[0+0-:1] = M_rightstack_q[9+0-:1];
    M_led_single2_0_data[1+0-:1] = 1'h0;
    M_led_single2_1_data[1+0-:1] = 1'h0;
    M_led_single2_2_data[1+0-:1] = 1'h0;
    M_led_single2_3_data[1+0-:1] = 1'h0;
    M_led_single2_4_data[1+0-:1] = 1'h0;
    M_led_single2_5_data[1+0-:1] = 1'h0;
    M_led_single2_6_data[1+0-:1] = 1'h0;
    M_led_single2_7_data[1+0-:1] = 1'h0;
    M_led_single2_8_data[1+0-:1] = 1'h0;
    M_led_single2_9_data[1+0-:1] = 1'h0;
    led_wire_0_0 = M_led_single0_0_out;
    led_wire_0_1 = M_led_single0_1_out;
    led_wire_0_2 = M_led_single0_2_out;
    led_wire_0_3 = M_led_single0_3_out;
    led_wire_0_4 = M_led_single0_4_out;
    led_wire_0_5 = M_led_single0_5_out;
    led_wire_0_6 = M_led_single0_6_out;
    led_wire_0_7 = M_led_single0_7_out;
    led_wire_0_8 = M_led_single0_8_out;
    led_wire_0_9 = M_led_single0_9_out;
    led_wire_1_0 = M_led_single1_0_out;
    led_wire_1_1 = M_led_single1_1_out;
    led_wire_1_2 = M_led_single1_2_out;
    led_wire_1_3 = M_led_single1_3_out;
    led_wire_1_4 = M_led_single1_4_out;
    led_wire_1_5 = M_led_single1_5_out;
    led_wire_1_6 = M_led_single1_6_out;
    led_wire_1_7 = M_led_single1_7_out;
    led_wire_1_8 = M_led_single1_8_out;
    led_wire_1_9 = M_led_single1_9_out;
    led_wire_2_0 = M_led_single2_0_out;
    led_wire_2_1 = M_led_single2_1_out;
    led_wire_2_2 = M_led_single2_2_out;
    led_wire_2_3 = M_led_single2_3_out;
    led_wire_2_4 = M_led_single2_4_out;
    led_wire_2_5 = M_led_single2_5_out;
    led_wire_2_6 = M_led_single2_6_out;
    led_wire_2_7 = M_led_single2_7_out;
    led_wire_2_8 = M_led_single2_8_out;
    led_wire_2_9 = M_led_single2_9_out;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_alu16_a = 16'h0000;
    M_alu16_b = 16'h0000;
    M_alu16_opcode = 6'h00;
    M_buttonMoveLP1_in = p1left_button;
    M_buttonMoveRP1_in = p1right_button;
    M_buttonRemove1P1_in = p1rm1_button;
    M_buttonRemove2P1_in = p1rm2_button;
    M_buttonMoveLP2_in = p2left_button;
    M_buttonMoveRP2_in = p2right_button;
    M_buttonRemove1P2_in = p2rm1_button;
    M_buttonRemove2P2_in = p2rm2_button;
    M_detectMoveLP1_in = M_buttonMoveLP1_out;
    M_detectMoveRP1_in = M_buttonMoveRP1_out;
    M_detectUpRm1P1_in = M_buttonRemove1P1_out;
    M_detectDnRm2P1_in = M_buttonRemove2P1_out;
    M_detectMoveLP2_in = M_buttonMoveLP2_out;
    M_detectMoveRP2_in = M_buttonMoveRP2_out;
    M_detectUpRm1P2_in = M_buttonRemove1P2_out;
    M_detectDnRm2P2_in = M_buttonRemove2P2_out;
    M_randl_enable = 1'h1;
    M_randm_enable = 1'h1;
    M_randr_enable = 1'h1;
    io_led[0+7-:8] = M_leftstack_q;
    io_led[8+7-:8] = M_middlestack_q;
    io_led[16+7-:8] = M_rightstack_q;
    
    case (M_states_q)
      START_states: begin
        M_randl_enable = 1'h1;
        M_randm_enable = 1'h1;
        M_randr_enable = 1'h1;
        M_leftstack_d = M_randl_out;
        M_middlestack_d = M_randm_out;
        M_rightstack_d = M_randr_out;
        if (M_detectUpRm1P1_out == 1'h1 | M_detectUpRm1P2_out == 1'h1) begin
          M_states_d = P1M_states;
        end else begin
          M_states_d = START_states;
        end
      end
      P1M_states: begin
        M_randl_enable = 1'h0;
        M_randm_enable = 1'h0;
        M_randr_enable = 1'h0;
        M_alu16_b = 16'h0001;
        M_alu16_opcode = 6'h35;
        if (M_detectMoveLP1_out == 1'h1) begin
          M_alu16_a = M_leftstack_q;
          if (M_alu16_out[0+0-:1] == 1'h1) begin
            M_states_d = P1M_states;
          end else begin
            M_states_d = P1L_states;
          end
        end else begin
          if (M_detectMoveRP1_out == 1'h1) begin
            M_alu16_a = M_rightstack_q;
            if (M_alu16_out[0+0-:1] == 1'h1) begin
              M_states_d = P1M_states;
            end else begin
              M_states_d = P1R_states;
            end
          end else begin
            if (M_detectUpRm1P1_out == 1'h1) begin
              M_alu16_a = M_middlestack_q;
              M_alu16_b = 16'h0001;
              M_alu16_opcode = 6'h35;
              if (M_alu16_out == 16'h0001) begin
                M_states_d = P1M_states;
              end else begin
                M_alu16_opcode = 6'h21;
                M_middlestack_d = M_alu16_out;
                M_states_d = P1C_states;
              end
            end else begin
              if (M_detectDnRm2P1_out == 1'h1) begin
                M_alu16_a = M_middlestack_q;
                M_alu16_b = 16'h0002;
                M_alu16_opcode = 6'h35;
                if (M_alu16_out == 16'h0001) begin
                  M_states_d = P1M_states;
                end else begin
                  M_alu16_opcode = 6'h21;
                  M_middlestack_d = M_alu16_out;
                  M_states_d = P1C_states;
                end
              end
            end
          end
        end
      end
      P1L_states: begin
        M_randl_enable = 1'h0;
        M_randm_enable = 1'h0;
        M_randr_enable = 1'h0;
        M_alu16_b = 16'h0001;
        M_alu16_opcode = 6'h35;
        if (M_detectMoveLP1_out == 1'h1) begin
          M_states_d = P1L_states;
        end else begin
          if (M_detectMoveRP1_out == 1'h1) begin
            M_alu16_a = M_middlestack_q;
            if (M_alu16_out[0+0-:1] == 1'h1) begin
              M_states_d = P1R_states;
              M_alu16_a = M_rightstack_q;
              if (M_alu16_out[0+0-:1] == 1'h1) begin
                M_states_d = P1L_states;
              end
            end else begin
              M_states_d = P1M_states;
            end
          end else begin
            if (M_detectUpRm1P1_out == 1'h1) begin
              M_alu16_a = M_leftstack_q;
              M_alu16_b = 16'h0001;
              M_alu16_opcode = 6'h35;
              if (M_alu16_out == 16'h0001) begin
                M_states_d = P1L_states;
              end else begin
                M_alu16_opcode = 6'h21;
                M_leftstack_d = M_alu16_out;
                M_states_d = P1C_states;
              end
            end else begin
              if (M_detectDnRm2P1_out == 1'h1) begin
                M_alu16_a = M_leftstack_q;
                M_alu16_b = 16'h0002;
                M_alu16_opcode = 6'h35;
                if (M_alu16_out == 16'h0001) begin
                  M_states_d = P1L_states;
                end else begin
                  M_alu16_opcode = 6'h21;
                  M_leftstack_d = M_alu16_out;
                  M_states_d = P1C_states;
                end
              end
            end
          end
        end
      end
      P1R_states: begin
        M_randl_enable = 1'h0;
        M_randm_enable = 1'h0;
        M_randr_enable = 1'h0;
        M_alu16_b = 16'h0001;
        M_alu16_opcode = 6'h35;
        if (M_detectMoveLP1_out == 1'h1) begin
          M_alu16_a = M_middlestack_q;
          if (M_alu16_out[0+0-:1] == 1'h1) begin
            M_states_d = P1L_states;
            M_alu16_a = M_leftstack_q;
            if (M_alu16_out[0+0-:1] == 1'h1) begin
              M_states_d = P1R_states;
            end
          end else begin
            M_states_d = P1M_states;
          end
        end else begin
          if (M_detectMoveRP1_out == 1'h1) begin
            M_states_d = P1R_states;
          end else begin
            if (M_detectUpRm1P1_out == 1'h1) begin
              M_alu16_a = M_rightstack_q;
              M_alu16_b = 16'h0001;
              M_alu16_opcode = 6'h35;
              if (M_alu16_out == 16'h0001) begin
                M_states_d = P1R_states;
              end else begin
                M_alu16_opcode = 6'h21;
                M_rightstack_d = M_alu16_out;
                M_states_d = P1C_states;
              end
            end else begin
              if (M_detectDnRm2P1_out == 1'h1) begin
                M_alu16_a = M_rightstack_q;
                M_alu16_b = 16'h0002;
                M_alu16_opcode = 6'h35;
                if (M_alu16_out == 16'h0001) begin
                  M_states_d = P1R_states;
                end else begin
                  M_alu16_opcode = 6'h21;
                  M_rightstack_d = M_alu16_out;
                  M_states_d = P1C_states;
                end
              end
            end
          end
        end
      end
      P2M_states: begin
        M_randl_enable = 1'h0;
        M_randm_enable = 1'h0;
        M_randr_enable = 1'h0;
        M_alu16_b = 16'h0001;
        M_alu16_opcode = 6'h35;
        if (M_detectMoveLP2_out == 1'h1) begin
          M_alu16_a = M_leftstack_q;
          if (M_alu16_out[0+0-:1] == 1'h1) begin
            M_states_d = P2M_states;
          end else begin
            M_states_d = P2L_states;
          end
        end else begin
          if (M_detectMoveRP2_out == 1'h1) begin
            M_alu16_a = M_rightstack_q;
            if (M_alu16_out[0+0-:1] == 1'h1) begin
              M_states_d = P2M_states;
            end else begin
              M_states_d = P2R_states;
            end
          end else begin
            if (M_detectUpRm1P2_out == 1'h1) begin
              M_alu16_a = M_middlestack_q;
              M_alu16_b = 16'h0001;
              M_alu16_opcode = 6'h35;
              if (M_alu16_out == 16'h0001) begin
                M_states_d = P2M_states;
              end else begin
                M_alu16_opcode = 6'h21;
                M_middlestack_d = M_alu16_out;
                M_states_d = P2C_states;
              end
            end else begin
              if (M_detectDnRm2P2_out == 1'h1) begin
                M_alu16_a = M_middlestack_q;
                M_alu16_b = 16'h0002;
                M_alu16_opcode = 6'h35;
                if (M_alu16_out == 16'h0001) begin
                  M_states_d = P2M_states;
                end else begin
                  M_alu16_opcode = 6'h21;
                  M_middlestack_d = M_alu16_out;
                  M_states_d = P2C_states;
                end
              end
            end
          end
        end
      end
      P2L_states: begin
        M_randl_enable = 1'h0;
        M_randm_enable = 1'h0;
        M_randr_enable = 1'h0;
        M_alu16_b = 16'h0001;
        M_alu16_opcode = 6'h35;
        if (M_detectMoveLP2_out == 1'h1) begin
          M_states_d = P2L_states;
        end else begin
          if (M_detectMoveRP2_out == 1'h1) begin
            M_alu16_a = M_middlestack_q;
            if (M_alu16_out[0+0-:1] == 1'h1) begin
              M_states_d = P2R_states;
              M_alu16_a = M_rightstack_q;
              if (M_alu16_out[0+0-:1] == 1'h1) begin
                M_states_d = P2L_states;
              end
            end else begin
              M_states_d = P2M_states;
            end
          end else begin
            if (M_detectUpRm1P2_out == 1'h1) begin
              M_alu16_a = M_leftstack_q;
              M_alu16_b = 16'h0001;
              M_alu16_opcode = 6'h35;
              if (M_alu16_out == 16'h0001) begin
                M_states_d = P2L_states;
              end else begin
                M_alu16_opcode = 6'h21;
                M_leftstack_d = M_alu16_out;
                M_states_d = P2C_states;
              end
            end else begin
              if (M_detectDnRm2P2_out == 1'h1) begin
                M_alu16_a = M_leftstack_q;
                M_alu16_b = 16'h0002;
                M_alu16_opcode = 6'h35;
                if (M_alu16_out == 16'h0001) begin
                  M_states_d = P2L_states;
                end else begin
                  M_alu16_opcode = 6'h21;
                  M_leftstack_d = M_alu16_out;
                  M_states_d = P2C_states;
                end
              end
            end
          end
        end
      end
      P2R_states: begin
        M_randl_enable = 1'h0;
        M_randm_enable = 1'h0;
        M_randr_enable = 1'h0;
        M_alu16_b = 16'h0001;
        M_alu16_opcode = 6'h35;
        if (M_detectMoveLP2_out == 1'h1) begin
          M_alu16_a = M_middlestack_q;
          if (M_alu16_out[0+0-:1] == 1'h1) begin
            M_states_d = P2L_states;
            M_alu16_a = M_leftstack_q;
            if (M_alu16_out[0+0-:1] == 1'h1) begin
              M_states_d = P2R_states;
            end
          end else begin
            M_states_d = P2M_states;
          end
        end else begin
          if (M_detectMoveRP2_out == 1'h1) begin
            M_states_d = P2R_states;
          end else begin
            if (M_detectUpRm1P2_out == 1'h1) begin
              M_alu16_a = M_rightstack_q;
              M_alu16_b = 16'h0001;
              M_alu16_opcode = 6'h35;
              if (M_alu16_out == 16'h0001) begin
                M_states_d = P2R_states;
              end else begin
                M_alu16_opcode = 6'h21;
                M_rightstack_d = M_alu16_out;
                M_states_d = P2C_states;
              end
            end else begin
              if (M_detectDnRm2P2_out == 1'h1) begin
                M_alu16_a = M_rightstack_q;
                M_alu16_b = 16'h0002;
                M_alu16_opcode = 6'h35;
                if (M_alu16_out == 16'h0001) begin
                  M_states_d = P2R_states;
                end else begin
                  M_alu16_opcode = 6'h21;
                  M_rightstack_d = M_alu16_out;
                  M_states_d = P2C_states;
                end
              end
            end
          end
        end
      end
      P1C_states: begin
        M_alu16_a = M_leftstack_q;
        M_alu16_b = 10'h000;
        M_alu16_opcode = 6'h33;
        if (M_alu16_out[0+0-:1] == 1'h1 && M_middlestack_q == 16'h0000 && M_rightstack_q == 16'h0000) begin
          M_states_d = START_states;
        end else begin
          M_alu16_a = M_leftstack_q;
          M_alu16_b = 10'h001;
          M_alu16_opcode = 6'h35;
          if (M_middlestack_q >= 10'h001) begin
            M_states_d = P2M_states;
          end else begin
            if (M_alu16_out[0+0-:1] != 1'h1) begin
              M_states_d = P2L_states;
            end else begin
              M_states_d = P2R_states;
            end
          end
        end
      end
      P2C_states: begin
        M_alu16_a = M_leftstack_q;
        M_alu16_b = 10'h000;
        M_alu16_opcode = 6'h33;
        if (M_alu16_out[0+0-:1] == 1'h1 && M_middlestack_q == 16'h0000 && M_rightstack_q == 16'h0000) begin
          M_states_d = START_states;
        end else begin
          M_alu16_a = M_leftstack_q;
          M_alu16_b = 10'h001;
          M_alu16_opcode = 6'h35;
          if (M_middlestack_q >= 10'h001) begin
            M_states_d = P1M_states;
          end else begin
            if (M_alu16_out[0+0-:1] != 1'h1) begin
              M_states_d = P1L_states;
            end else begin
              M_states_d = P1R_states;
            end
          end
        end
      end
      default: begin
        M_states_d = START_states;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_states_q <= 1'h0;
    end else begin
      M_states_q <= M_states_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_leftstack_q <= 10'h3ff;
      M_middlestack_q <= 10'h3ff;
      M_rightstack_q <= 10'h3ff;
      M_led_output0_q <= 20'h00000;
      M_led_output1_q <= 20'h00000;
      M_led_output2_q <= 20'h00000;
    end else begin
      M_leftstack_q <= M_leftstack_d;
      M_middlestack_q <= M_middlestack_d;
      M_rightstack_q <= M_rightstack_d;
      M_led_output0_q <= M_led_output0_d;
      M_led_output1_q <= M_led_output1_d;
      M_led_output2_q <= M_led_output2_d;
    end
  end
  
endmodule
